function main() {
  array9<array2<int3>> path;
  expose path;

  gridWidth = 2;
  gridHeight = 2;

  startCoords = [[1, 0]];
  endCoords = [[1, 3]];

  validatePath!(path, gridWidth, gridHeight, startCoords, endCoords);
};

function validatePath!(path, gridWidth, gridHeight, startCoords, endCoords) {
  function^ main() {
    previous = [-1, -1];

    path.each(function^ (current, index) {
      invariant inBounds?(current) || atTheEnd?(current);

      invariant if(
        atTheEnd?(previous),
        stayedStill?(previous, current),
        movedByOne?(previous, current)
      );

      previous = current;
    });

    invariant !duplicateVisits?(path);

    invariant atTheStart?(path.first);
    invariant atTheEnd?(path.last);
  };

  function^ inBounds?(coord) {
    x, y = coord[0], coord[1];

    xBounds = x >= 0 && x <= gridWidth;
    yBounds = y >= 0 && y <= gridHeight;

    return xBounds && yBounds;
  };

  function^ atTheStart?(coord) {
    return startCoords.include?(coord);
  };

  function^ atTheEnd?(coord) {
    return endCoords.include?(coord);
  };

  function stayedStill?(c1, c2) {
    return c1 == c2;
  };

  function movedByOne?(c1, c2) {
    x1, y1 = c1[0], c1[1];
    x2, y2 = c2[0], c2[1];

    xDelta = (x1 - x2).abs;
    yDelta = (y1 - y2).abs;

    xMoved = xDelta == 1 && yDelta == 0;
    yMoved = yDelta == 1 && xDelta == 0;

    return xMoved || yMoved || c1 == [-1, -1];
  };

  function^ duplicateVisits?(path) {
    duplicates = false;

    path.eachPair(function^ (a, b) {
      duplicates ||= !atTheEnd?(a) && a == b;
    });

    return duplicates;
  };

  main();
};

main();
